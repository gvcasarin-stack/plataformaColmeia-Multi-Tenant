// Script de teste para confirma√ß√£o de email
// Este script simula as chamadas que seriam feitas em produ√ß√£o

const BASE_URL = 'http://localhost:3000';

async function testHealthCheck() {
  try {
    console.log('üè• Testando health check...');
    
    const response = await fetch(`${BASE_URL}/api/confirm-email`, {
      method: 'GET'
    });
    
    const result = await response.json();
    console.log('‚úÖ Health check resultado:', JSON.stringify(result, null, 2));
    
    return result.configured;
  } catch (error) {
    console.error('‚ùå Erro no health check:', error.message);
    return false;
  }
}

async function testEmailConfirmation(token_hash, code) {
  try {
    console.log('üìß Testando confirma√ß√£o de email...');
    
    const response = await fetch(`${BASE_URL}/api/confirm-email`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        token_hash,
        code,
        type: 'email'
      })
    });
    
    const result = await response.json();
    console.log('‚úÖ Confirma√ß√£o resultado:', JSON.stringify(result, null, 2));
    
    return result.success;
  } catch (error) {
    console.error('‚ùå Erro na confirma√ß√£o:', error.message);
    return false;
  }
}

async function runTests() {
  console.log('üöÄ Iniciando testes do sistema de confirma√ß√£o de email\n');
  
  // Teste 1: Health Check
  const isConfigured = await testHealthCheck();
  console.log('\n' + '='.repeat(50) + '\n');
  
  if (!isConfigured) {
    console.log('‚ö†Ô∏è  Supabase n√£o configurado. Verifique as vari√°veis de ambiente.');
    console.log('   Para configurar, crie um arquivo .env.local com:');
    console.log('   NEXT_PUBLIC_SUPABASE_URL=sua_url_aqui');
    console.log('   NEXT_PUBLIC_SUPABASE_ANON_KEY=sua_chave_anon_aqui');
    console.log('   SUPABASE_SERVICE_ROLE_KEY=sua_chave_service_role_aqui');
    return;
  }
  
  // Teste 2: Confirma√ß√£o sem token (deve falhar)
  console.log('üß™ Teste 2: Confirma√ß√£o sem token...');
  await testEmailConfirmation();
  console.log('\n' + '='.repeat(50) + '\n');
  
  // Teste 3: Confirma√ß√£o com token inv√°lido (deve falhar)
  console.log('üß™ Teste 3: Confirma√ß√£o com token inv√°lido...');
  await testEmailConfirmation('token_invalido_teste');
  console.log('\n' + '='.repeat(50) + '\n');
  
  console.log('‚úÖ Testes b√°sicos conclu√≠dos!');
  console.log('üí° Para testar com tokens reais, use os links de confirma√ß√£o do Supabase.');
}

// Executar se chamado diretamente
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = { testHealthCheck, testEmailConfirmation }; 
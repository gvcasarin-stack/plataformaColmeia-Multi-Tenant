require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function checkTriggerLog() {
  console.log('üîç Verificando se a tabela trigger_log existe...');
  
  try {
    const { data, error } = await supabase
      .from('trigger_log')
      .select('*')
      .limit(1);
      
    if (error) {
      if (error.code === 'PGRST106') {
        console.log('‚ùå Tabela trigger_log N√ÉO EXISTE (como esperado)');
        console.log('   ‚Üí Warning √© FALSO POSITIVO');
        return false;
      } else {
        console.log('‚ùå Erro ao verificar:', error);
        return null;
      }
    } else {
      console.log('‚úÖ Tabela trigger_log EXISTE');
      console.log('   ‚Üí Warning √© V√ÅLIDO');
      return true;
    }
  } catch (e) {
    console.log('‚ùå Erro:', e.message);
    return null;
  }
}

// Tamb√©m vamos verificar as fun√ß√µes
async function checkFunctions() {
  console.log('\nüîç Verificando fun√ß√µes com warnings...');
  
  // Verificar se handle_new_user existe
  try {
    const { data, error } = await supabase
      .rpc('handle_new_user');
      
    console.log('‚úÖ handle_new_user: Fun√ß√£o EXISTE');
  } catch (e) {
    if (e.message.includes('function handle_new_user')) {
      console.log('‚úÖ handle_new_user: Fun√ß√£o EXISTE (erro esperado sem par√¢metros)');
    } else {
      console.log('‚ùå handle_new_user: Fun√ß√£o N√ÉO EXISTE');
    }
  }
  
  // Verificar se get_utc_timestamp existe
  try {
    const { data, error } = await supabase
      .rpc('get_utc_timestamp');
      
    if (error) {
      console.log('‚ùå get_utc_timestamp: Erro -', error.message);
    } else {
      console.log('‚úÖ get_utc_timestamp: Fun√ß√£o EXISTE - resultado:', data);
    }
  } catch (e) {
    console.log('‚ùå get_utc_timestamp: Fun√ß√£o N√ÉO EXISTE');
  }
  
  // Verificar se cleanup_expired_sessions existe
  try {
    const { data, error } = await supabase
      .rpc('cleanup_expired_sessions');
      
    if (error) {
      console.log('‚ùå cleanup_expired_sessions: Erro -', error.message);
    } else {
      console.log('‚úÖ cleanup_expired_sessions: Fun√ß√£o EXISTE - resultado:', data);
    }
  } catch (e) {
    console.log('‚ùå cleanup_expired_sessions: Fun√ß√£o N√ÉO EXISTE');
  }
}

async function main() {
  console.log('üîß Verificando configura√ß√£o do Supabase...');
  console.log('URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? 'CONFIGURADA' : 'N√ÉO CONFIGURADA');
  console.log('Service Role Key:', process.env.SUPABASE_SERVICE_ROLE_KEY ? 'CONFIGURADA' : 'N√ÉO CONFIGURADA');
  console.log('');
  
  await checkTriggerLog();
  await checkFunctions();
}

main().catch(console.error); 
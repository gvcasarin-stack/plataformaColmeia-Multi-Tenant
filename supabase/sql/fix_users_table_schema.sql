-- ============================================================================
-- CORRE√á√ÉO CR√çTICA: Schema da Tabela Users para Supabase
-- ============================================================================
-- Este script adiciona as colunas que est√£o faltando na tabela users
-- para compatibilidade com o sistema migrado do Firebase

-- ============================================================================
-- 1. ADICIONAR COLUNAS QUE EST√ÉO FALTANDO
-- ============================================================================

-- Adicionar coluna pending_approval se n√£o existir
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'pending_approval'
    ) THEN
        ALTER TABLE users ADD COLUMN pending_approval BOOLEAN DEFAULT false;
        RAISE NOTICE '‚úÖ Coluna pending_approval adicionada √† tabela users';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Coluna pending_approval j√° existe na tabela users';
    END IF;
END $$;

-- Adicionar coluna is_company se n√£o existir
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'is_company'
    ) THEN
        ALTER TABLE users ADD COLUMN is_company BOOLEAN DEFAULT false;
        RAISE NOTICE '‚úÖ Coluna is_company adicionada √† tabela users';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Coluna is_company j√° existe na tabela users';
    END IF;
END $$;

-- Adicionar coluna company_name se n√£o existir
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'company_name'
    ) THEN
        ALTER TABLE users ADD COLUMN company_name TEXT;
        RAISE NOTICE '‚úÖ Coluna company_name adicionada √† tabela users';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Coluna company_name j√° existe na tabela users';
    END IF;
END $$;

-- Adicionar coluna cnpj se n√£o existir
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'cnpj'
    ) THEN
        ALTER TABLE users ADD COLUMN cnpj TEXT;
        RAISE NOTICE '‚úÖ Coluna cnpj adicionada √† tabela users';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Coluna cnpj j√° existe na tabela users';
    END IF;
END $$;

-- Adicionar coluna cpf se n√£o existir
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'cpf'
    ) THEN
        ALTER TABLE users ADD COLUMN cpf TEXT;
        RAISE NOTICE '‚úÖ Coluna cpf adicionada √† tabela users';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Coluna cpf j√° existe na tabela users';
    END IF;
END $$;

-- Adicionar colunas de notifica√ß√£o se n√£o existirem
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'email_notification_status'
    ) THEN
        ALTER TABLE users ADD COLUMN email_notification_status BOOLEAN DEFAULT true;
        RAISE NOTICE '‚úÖ Coluna email_notification_status adicionada √† tabela users';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Coluna email_notification_status j√° existe na tabela users';
    END IF;
END $$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'email_notification_documents'
    ) THEN
        ALTER TABLE users ADD COLUMN email_notification_documents BOOLEAN DEFAULT true;
        RAISE NOTICE '‚úÖ Coluna email_notification_documents adicionada √† tabela users';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Coluna email_notification_documents j√° existe na tabela users';
    END IF;
END $$;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'email_notification_comments'
    ) THEN
        ALTER TABLE users ADD COLUMN email_notification_comments BOOLEAN DEFAULT true;
        RAISE NOTICE '‚úÖ Coluna email_notification_comments adicionada √† tabela users';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Coluna email_notification_comments j√° existe na tabela users';
    END IF;
END $$;

-- ============================================================================
-- 2. VERIFICAR SE A COLUNA full_name EXISTE (RENOMEAR name SE NECESS√ÅRIO)
-- ============================================================================

DO $$
BEGIN
    -- Se full_name n√£o existe mas name existe, renomear
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'full_name'
    ) AND EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'name'
    ) THEN
        ALTER TABLE users RENAME COLUMN name TO full_name;
        RAISE NOTICE '‚úÖ Coluna name renomeada para full_name na tabela users';
    ELSIF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'full_name'
    ) THEN
        RAISE NOTICE '‚ö†Ô∏è Coluna full_name j√° existe na tabela users';
    ELSE
        -- Se nem name nem full_name existem, criar full_name
        ALTER TABLE users ADD COLUMN full_name TEXT;
        RAISE NOTICE '‚úÖ Coluna full_name criada na tabela users';
    END IF;
END $$;

-- ============================================================================
-- 3. CRIAR √çNDICES PARA PERFORMANCE
-- ============================================================================

-- √çndice para pending_approval (usado frequentemente nas consultas)
CREATE INDEX IF NOT EXISTS idx_users_pending_approval ON users(pending_approval);

-- √çndice para role (usado frequentemente nas consultas)
CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);

-- √çndice para is_company (usado nas consultas de clientes)
CREATE INDEX IF NOT EXISTS idx_users_is_company ON users(is_company);

-- √çndice para email (usado para login e busca)
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);

-- ============================================================================
-- 4. ATUALIZAR POL√çTICA RLS SE NECESS√ÅRIO
-- ============================================================================

-- Verificar se RLS est√° habilitado
DO $$
BEGIN
    -- Habilitar RLS na tabela users se n√£o estiver habilitado
    IF NOT EXISTS (
        SELECT 1 FROM pg_tables 
        WHERE tablename = 'users' AND rowsecurity = true
    ) THEN
        ALTER TABLE users ENABLE ROW LEVEL SECURITY;
        RAISE NOTICE '‚úÖ RLS habilitado na tabela users';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è RLS j√° est√° habilitado na tabela users';
    END IF;
END $$;

-- ============================================================================
-- 5. VERIFICA√á√ÉO FINAL E RELAT√ìRIO
-- ============================================================================

DO $$
DECLARE
    users_count INTEGER;
    pending_count INTEGER;
    columns_info TEXT;
BEGIN
    -- Contar total de usu√°rios
    SELECT COUNT(*) INTO users_count FROM users;
    
    -- Contar usu√°rios pendentes (se a coluna existir)
    BEGIN
        SELECT COUNT(*) INTO pending_count FROM users WHERE pending_approval = true;
    EXCEPTION WHEN undefined_column THEN
        pending_count := 0;
        RAISE NOTICE '‚ö†Ô∏è Coluna pending_approval ainda n√£o foi criada';
    END;
    
    -- Listar colunas existentes
    SELECT string_agg(column_name, ', ' ORDER BY column_name) INTO columns_info
    FROM information_schema.columns 
    WHERE table_name = 'users' AND table_schema = 'public';
    
    RAISE NOTICE 'üìä RELAT√ìRIO DA CORRE√á√ÉO DA TABELA USERS:';
    RAISE NOTICE 'üë• Total de usu√°rios: %', users_count;
    RAISE NOTICE '‚è≥ Usu√°rios pendentes de aprova√ß√£o: %', pending_count;
    RAISE NOTICE 'üìã Colunas na tabela users: %', columns_info;
    RAISE NOTICE '‚úÖ Corre√ß√£o do schema da tabela users conclu√≠da!';
    RAISE NOTICE 'üéâ Agora a p√°gina /admin/clientes deve funcionar corretamente!';
END $$;
